(defvar a 0)
(defvar b 0)
(defvar *vector* (make-array 10))
(defun fun1 () 
(setf (aref *vector* 1) (+ 2 3))
(setf (aref *vector* 4) 5)
(setf (aref *vector* 7) 10)
(setf (aref *vector* 0) 1)
(setf (aref *vector* 9) a)
)
(defun operacionesyestructuras (val1 val2) 
(if  (> val1 val2)  (progn
(print "El primer valor es mayor")
)
(progn
(print "El segundo valor es mayor")
))
(setq a (- val1 (/ (* val1 val2) (- 4 2))))
(print a)
(loop while  (<= a 0)  do 
(setq a (+ a 3))
(print a)
)
a
)
(defun main () 
(operacionesyestructuras 2 4)
(operacionesyestructuras 10 5)
(fun1)
(print "VALORES DEL VECTOR")
(print *vector*)
(print "SUMAR ELEMENTOS")
(let ((c 0))
(setq c 0)
(dotimes (i (length *vector*) c)
(incf c (aref *vector* i)))
(print c)
(print "PRODUCTO ESCALAR")
(setq b (reduce #'+ (map 'list #'* *vector* *vector*)))
(print b)
(print "INVERTIR VECTOR")
(setq *vector* (coerce (reverse (coerce *vector* 'list)) 'vector))
(print *vector*)
(print "INCREMENTO")
(dotimes (i (length *vector*))
(setf (aref *vector* i) (+ (aref *vector* i) 5)))
(print *vector*)
(print "Hola mundo")
c
))
(main)