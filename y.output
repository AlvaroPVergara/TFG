Terminals unused in grammar

    INTEGER


Grammar

    0 $accept: axioma $end

    1 axioma: instrucciones

    2 instrucciones: ε
    3              | sentencia instrucciones

    4 sentencia: '(' definicion ')'
    5          | '(' asignacion ')'
    6          | '(' condicion
    7          | '(' bucle ')'
    8          | '(' llamada ')'
    9          | '(' deffuncion
   10          | '(' print ')'
   11          | '(' returnfrom ')'
   12          | '(' incf ')'
   13          | '(' invertir ')'
   14          | variable

   15 $@1: ε

   16 deffuncion: DEFUN IDENTIF $@1 '(' argumentosfun ')' instrucciones ')'

   17 argumentosfun: ε
   18              | variable argumentosfun

   19 returnfrom: RETURN '-' FROM IDENTIF expresion

   20 definicion: DEFVAR variable restodef

   21 $@2: ε

   22 definicion: LET '(' '(' variable restodef ')' ')' $@2 instrucciones

   23 restodef: expresion
   24         | '(' MAKE '-' ARRAY expresion ')'

   25 asignacion: SETQ variable expresion
   26           | SETQ variable '(' condicion
   27           | SETF '(' AREF variable expresion ')' expresion
   28           | SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

   29 condicion: IF expresion '(' PROGN instrucciones ')' restoif

   30 restoif: ')'
   31        | '(' PROGN instrucciones ')' ')'

   32 bucle: LOOP WHILE expresion DO instrucciones
   33      | DOTIMES '(' variable '(' LENGTH variable ')' variable ')' instrucciones
   34      | DOTIMES '(' variable '(' LENGTH variable ')' ')' instrucciones

   35 llamada: IDENTIF argumentos

   36 argumentos: ε
   37           | expresion argumentos

   38 print: PRINT restoprint

   39 restoprint: STRING
   40           | expresion

   41 incf: INCF variable '(' AREF variable expresion ')'

   42 invertir: COERCE '(' REVERSE '(' COERCE variable '\'' LIST ')' ')' '\'' variable

   43 expresion: operando
   44          | '(' '+' expresion expresion ')'
   45          | '(' '-' expresion expresion ')'
   46          | '(' '*' expresion expresion ')'
   47          | '(' '/' expresion expresion ')'
   48          | '(' AND expresion expresion ')'
   49          | '(' OR expresion expresion ')'
   50          | '(' '=' expresion expresion ')'
   51          | '(' '<' expresion expresion ')'
   52          | '(' '>' expresion expresion ')'
   53          | '(' LEQ expresion expresion ')'
   54          | '(' GEQ expresion expresion ')'
   55          | '(' NEQ expresion expresion ')'

   56 operando: NUMBER
   57         | variable

   58 variable: IDENTIF
   59         | '*' IDENTIF '*'


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 28
    '\'' (39) 28 42
    '(' (40) 4 5 6 7 8 9 10 11 12 13 16 22 24 26 27 28 29 31 33 34 41 42 44 45 46 47 48 49 50 51 52 53 54 55
    ')' (41) 4 5 7 8 10 11 12 13 16 22 24 27 28 29 30 31 33 34 41 42 44 45 46 47 48 49 50 51 52 53 54 55
    '*' (42) 28 46 59
    '+' (43) 28 44
    '-' (45) 19 24 45
    '/' (47) 47
    '<' (60) 51
    '=' (61) 50
    '>' (62) 52
    error (256)
    NUMBER (258) 56
    IDENTIF (259) 16 19 35 58 59
    INTEGER (260)
    STRING (261) 39
    DEFVAR (262) 20
    SETQ (263) 25 26 28
    SETF (264) 27
    AREF (265) 27 41
    MAKE (266) 24
    ARRAY (267) 24
    LET (268) 22
    WHILE (269) 32
    LOOP (270) 32
    IF (271) 29
    PROGN (272) 29 31
    DO (273) 32
    PRINT (274) 38
    DEFUN (275) 16
    RETURN (276) 19
    FROM (277) 19
    AND (278) 48
    OR (279) 49
    LEQ (280) 53
    GEQ (281) 54
    NEQ (282) 55
    DOTIMES (283) 33 34
    LENGTH (284) 33 34
    INCF (285) 41
    REDUCE (286) 28
    MAP (287) 28
    LIST (288) 28 42
    COERCE (289) 42
    REVERSE (290) 42


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    axioma (48)
        on left: 1
        on right: 0
    instrucciones (49)
        on left: 2 3
        on right: 1 3 16 22 29 31 32 33 34
    sentencia (50)
        on left: 4 5 6 7 8 9 10 11 12 13 14
        on right: 3
    deffuncion (51)
        on left: 16
        on right: 9
    $@1 (52)
        on left: 15
        on right: 16
    argumentosfun (53)
        on left: 17 18
        on right: 16 18
    returnfrom (54)
        on left: 19
        on right: 11
    definicion (55)
        on left: 20 22
        on right: 4
    $@2 (56)
        on left: 21
        on right: 22
    restodef (57)
        on left: 23 24
        on right: 20 22
    asignacion (58)
        on left: 25 26 27 28
        on right: 5
    condicion (59)
        on left: 29
        on right: 6 26
    restoif (60)
        on left: 30 31
        on right: 29
    bucle (61)
        on left: 32 33 34
        on right: 7
    llamada (62)
        on left: 35
        on right: 8
    argumentos (63)
        on left: 36 37
        on right: 35 37
    print (64)
        on left: 38
        on right: 10
    restoprint (65)
        on left: 39 40
        on right: 38
    incf (66)
        on left: 41
        on right: 12
    invertir (67)
        on left: 42
        on right: 13
    expresion (68)
        on left: 43 44 45 46 47 48 49 50 51 52 53 54 55
        on right: 19 23 24 25 27 29 32 37 40 41 44 45 46 47 48 49 50 51 52 53 54 55
    operando (69)
        on left: 56 57
        on right: 43
    variable (70)
        on left: 58 59
        on right: 14 18 20 22 25 26 27 28 33 34 41 42 57


State 0

    0 $accept: • axioma $end

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    axioma         go to state 4
    instrucciones  go to state 5
    sentencia      go to state 6
    variable       go to state 7


State 1

   58 variable: IDENTIF •

    $default  reduce using rule 58 (variable)


State 2

   59 variable: '*' • IDENTIF '*'

    IDENTIF  shift, and go to state 8


State 3

    4 sentencia: '(' • definicion ')'
    5          | '(' • asignacion ')'
    6          | '(' • condicion
    7          | '(' • bucle ')'
    8          | '(' • llamada ')'
    9          | '(' • deffuncion
   10          | '(' • print ')'
   11          | '(' • returnfrom ')'
   12          | '(' • incf ')'
   13          | '(' • invertir ')'

    IDENTIF  shift, and go to state 9
    DEFVAR   shift, and go to state 10
    SETQ     shift, and go to state 11
    SETF     shift, and go to state 12
    LET      shift, and go to state 13
    LOOP     shift, and go to state 14
    IF       shift, and go to state 15
    PRINT    shift, and go to state 16
    DEFUN    shift, and go to state 17
    RETURN   shift, and go to state 18
    DOTIMES  shift, and go to state 19
    INCF     shift, and go to state 20
    COERCE   shift, and go to state 21

    deffuncion  go to state 22
    returnfrom  go to state 23
    definicion  go to state 24
    asignacion  go to state 25
    condicion   go to state 26
    bucle       go to state 27
    llamada     go to state 28
    print       go to state 29
    incf        go to state 30
    invertir    go to state 31


State 4

    0 $accept: axioma • $end

    $end  shift, and go to state 32


State 5

    1 axioma: instrucciones •

    $default  reduce using rule 1 (axioma)


State 6

    3 instrucciones: sentencia • instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 33
    sentencia      go to state 6
    variable       go to state 7


State 7

   14 sentencia: variable •

    $default  reduce using rule 14 (sentencia)


State 8

   59 variable: '*' IDENTIF • '*'

    '*'  shift, and go to state 34


State 9

   35 llamada: IDENTIF • argumentos

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    $default  reduce using rule 36 (argumentos)

    argumentos  go to state 37
    expresion   go to state 38
    operando    go to state 39
    variable    go to state 40


State 10

   20 definicion: DEFVAR • variable restodef

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 41


State 11

   25 asignacion: SETQ • variable expresion
   26           | SETQ • variable '(' condicion
   28           | SETQ • variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 42


State 12

   27 asignacion: SETF • '(' AREF variable expresion ')' expresion

    '('  shift, and go to state 43


State 13

   22 definicion: LET • '(' '(' variable restodef ')' ')' $@2 instrucciones

    '('  shift, and go to state 44


State 14

   32 bucle: LOOP • WHILE expresion DO instrucciones

    WHILE  shift, and go to state 45


State 15

   29 condicion: IF • expresion '(' PROGN instrucciones ')' restoif

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 46
    operando   go to state 39
    variable   go to state 40


State 16

   38 print: PRINT • restoprint

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    STRING   shift, and go to state 47
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    restoprint  go to state 48
    expresion   go to state 49
    operando    go to state 39
    variable    go to state 40


State 17

   16 deffuncion: DEFUN • IDENTIF $@1 '(' argumentosfun ')' instrucciones ')'

    IDENTIF  shift, and go to state 50


State 18

   19 returnfrom: RETURN • '-' FROM IDENTIF expresion

    '-'  shift, and go to state 51


State 19

   33 bucle: DOTIMES • '(' variable '(' LENGTH variable ')' variable ')' instrucciones
   34      | DOTIMES • '(' variable '(' LENGTH variable ')' ')' instrucciones

    '('  shift, and go to state 52


State 20

   41 incf: INCF • variable '(' AREF variable expresion ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 53


State 21

   42 invertir: COERCE • '(' REVERSE '(' COERCE variable '\'' LIST ')' ')' '\'' variable

    '('  shift, and go to state 54


State 22

    9 sentencia: '(' deffuncion •

    $default  reduce using rule 9 (sentencia)


State 23

   11 sentencia: '(' returnfrom • ')'

    ')'  shift, and go to state 55


State 24

    4 sentencia: '(' definicion • ')'

    ')'  shift, and go to state 56


State 25

    5 sentencia: '(' asignacion • ')'

    ')'  shift, and go to state 57


State 26

    6 sentencia: '(' condicion •

    $default  reduce using rule 6 (sentencia)


State 27

    7 sentencia: '(' bucle • ')'

    ')'  shift, and go to state 58


State 28

    8 sentencia: '(' llamada • ')'

    ')'  shift, and go to state 59


State 29

   10 sentencia: '(' print • ')'

    ')'  shift, and go to state 60


State 30

   12 sentencia: '(' incf • ')'

    ')'  shift, and go to state 61


State 31

   13 sentencia: '(' invertir • ')'

    ')'  shift, and go to state 62


State 32

    0 $accept: axioma $end •

    $default  accept


State 33

    3 instrucciones: sentencia instrucciones •

    $default  reduce using rule 3 (instrucciones)


State 34

   59 variable: '*' IDENTIF '*' •

    $default  reduce using rule 59 (variable)


State 35

   56 operando: NUMBER •

    $default  reduce using rule 56 (operando)


State 36

   44 expresion: '(' • '+' expresion expresion ')'
   45          | '(' • '-' expresion expresion ')'
   46          | '(' • '*' expresion expresion ')'
   47          | '(' • '/' expresion expresion ')'
   48          | '(' • AND expresion expresion ')'
   49          | '(' • OR expresion expresion ')'
   50          | '(' • '=' expresion expresion ')'
   51          | '(' • '<' expresion expresion ')'
   52          | '(' • '>' expresion expresion ')'
   53          | '(' • LEQ expresion expresion ')'
   54          | '(' • GEQ expresion expresion ')'
   55          | '(' • NEQ expresion expresion ')'

    AND  shift, and go to state 63
    OR   shift, and go to state 64
    LEQ  shift, and go to state 65
    GEQ  shift, and go to state 66
    NEQ  shift, and go to state 67
    '+'  shift, and go to state 68
    '-'  shift, and go to state 69
    '*'  shift, and go to state 70
    '/'  shift, and go to state 71
    '='  shift, and go to state 72
    '<'  shift, and go to state 73
    '>'  shift, and go to state 74


State 37

   35 llamada: IDENTIF argumentos •

    $default  reduce using rule 35 (llamada)


State 38

   37 argumentos: expresion • argumentos

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    $default  reduce using rule 36 (argumentos)

    argumentos  go to state 75
    expresion   go to state 38
    operando    go to state 39
    variable    go to state 40


State 39

   43 expresion: operando •

    $default  reduce using rule 43 (expresion)


State 40

   57 operando: variable •

    $default  reduce using rule 57 (operando)


State 41

   20 definicion: DEFVAR variable • restodef

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 76

    restodef   go to state 77
    expresion  go to state 78
    operando   go to state 39
    variable   go to state 40


State 42

   25 asignacion: SETQ variable • expresion
   26           | SETQ variable • '(' condicion
   28           | SETQ variable • '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 79

    expresion  go to state 80
    operando   go to state 39
    variable   go to state 40


State 43

   27 asignacion: SETF '(' • AREF variable expresion ')' expresion

    AREF  shift, and go to state 81


State 44

   22 definicion: LET '(' • '(' variable restodef ')' ')' $@2 instrucciones

    '('  shift, and go to state 82


State 45

   32 bucle: LOOP WHILE • expresion DO instrucciones

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 83
    operando   go to state 39
    variable   go to state 40


State 46

   29 condicion: IF expresion • '(' PROGN instrucciones ')' restoif

    '('  shift, and go to state 84


State 47

   39 restoprint: STRING •

    $default  reduce using rule 39 (restoprint)


State 48

   38 print: PRINT restoprint •

    $default  reduce using rule 38 (print)


State 49

   40 restoprint: expresion •

    $default  reduce using rule 40 (restoprint)


State 50

   16 deffuncion: DEFUN IDENTIF • $@1 '(' argumentosfun ')' instrucciones ')'

    $default  reduce using rule 15 ($@1)

    $@1  go to state 85


State 51

   19 returnfrom: RETURN '-' • FROM IDENTIF expresion

    FROM  shift, and go to state 86


State 52

   33 bucle: DOTIMES '(' • variable '(' LENGTH variable ')' variable ')' instrucciones
   34      | DOTIMES '(' • variable '(' LENGTH variable ')' ')' instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 87


State 53

   41 incf: INCF variable • '(' AREF variable expresion ')'

    '('  shift, and go to state 88


State 54

   42 invertir: COERCE '(' • REVERSE '(' COERCE variable '\'' LIST ')' ')' '\'' variable

    REVERSE  shift, and go to state 89


State 55

   11 sentencia: '(' returnfrom ')' •

    $default  reduce using rule 11 (sentencia)


State 56

    4 sentencia: '(' definicion ')' •

    $default  reduce using rule 4 (sentencia)


State 57

    5 sentencia: '(' asignacion ')' •

    $default  reduce using rule 5 (sentencia)


State 58

    7 sentencia: '(' bucle ')' •

    $default  reduce using rule 7 (sentencia)


State 59

    8 sentencia: '(' llamada ')' •

    $default  reduce using rule 8 (sentencia)


State 60

   10 sentencia: '(' print ')' •

    $default  reduce using rule 10 (sentencia)


State 61

   12 sentencia: '(' incf ')' •

    $default  reduce using rule 12 (sentencia)


State 62

   13 sentencia: '(' invertir ')' •

    $default  reduce using rule 13 (sentencia)


State 63

   48 expresion: '(' AND • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 90
    operando   go to state 39
    variable   go to state 40


State 64

   49 expresion: '(' OR • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 91
    operando   go to state 39
    variable   go to state 40


State 65

   53 expresion: '(' LEQ • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 92
    operando   go to state 39
    variable   go to state 40


State 66

   54 expresion: '(' GEQ • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 93
    operando   go to state 39
    variable   go to state 40


State 67

   55 expresion: '(' NEQ • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 94
    operando   go to state 39
    variable   go to state 40


State 68

   44 expresion: '(' '+' • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 95
    operando   go to state 39
    variable   go to state 40


State 69

   45 expresion: '(' '-' • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 96
    operando   go to state 39
    variable   go to state 40


State 70

   46 expresion: '(' '*' • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 97
    operando   go to state 39
    variable   go to state 40


State 71

   47 expresion: '(' '/' • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 98
    operando   go to state 39
    variable   go to state 40


State 72

   50 expresion: '(' '=' • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 99
    operando   go to state 39
    variable   go to state 40


State 73

   51 expresion: '(' '<' • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 100
    operando   go to state 39
    variable   go to state 40


State 74

   52 expresion: '(' '>' • expresion expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 101
    operando   go to state 39
    variable   go to state 40


State 75

   37 argumentos: expresion argumentos •

    $default  reduce using rule 37 (argumentos)


State 76

   24 restodef: '(' • MAKE '-' ARRAY expresion ')'
   44 expresion: '(' • '+' expresion expresion ')'
   45          | '(' • '-' expresion expresion ')'
   46          | '(' • '*' expresion expresion ')'
   47          | '(' • '/' expresion expresion ')'
   48          | '(' • AND expresion expresion ')'
   49          | '(' • OR expresion expresion ')'
   50          | '(' • '=' expresion expresion ')'
   51          | '(' • '<' expresion expresion ')'
   52          | '(' • '>' expresion expresion ')'
   53          | '(' • LEQ expresion expresion ')'
   54          | '(' • GEQ expresion expresion ')'
   55          | '(' • NEQ expresion expresion ')'

    MAKE  shift, and go to state 102
    AND   shift, and go to state 63
    OR    shift, and go to state 64
    LEQ   shift, and go to state 65
    GEQ   shift, and go to state 66
    NEQ   shift, and go to state 67
    '+'   shift, and go to state 68
    '-'   shift, and go to state 69
    '*'   shift, and go to state 70
    '/'   shift, and go to state 71
    '='   shift, and go to state 72
    '<'   shift, and go to state 73
    '>'   shift, and go to state 74


State 77

   20 definicion: DEFVAR variable restodef •

    $default  reduce using rule 20 (definicion)


State 78

   23 restodef: expresion •

    $default  reduce using rule 23 (restodef)


State 79

   26 asignacion: SETQ variable '(' • condicion
   28           | SETQ variable '(' • REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'
   44 expresion: '(' • '+' expresion expresion ')'
   45          | '(' • '-' expresion expresion ')'
   46          | '(' • '*' expresion expresion ')'
   47          | '(' • '/' expresion expresion ')'
   48          | '(' • AND expresion expresion ')'
   49          | '(' • OR expresion expresion ')'
   50          | '(' • '=' expresion expresion ')'
   51          | '(' • '<' expresion expresion ')'
   52          | '(' • '>' expresion expresion ')'
   53          | '(' • LEQ expresion expresion ')'
   54          | '(' • GEQ expresion expresion ')'
   55          | '(' • NEQ expresion expresion ')'

    IF      shift, and go to state 15
    AND     shift, and go to state 63
    OR      shift, and go to state 64
    LEQ     shift, and go to state 65
    GEQ     shift, and go to state 66
    NEQ     shift, and go to state 67
    REDUCE  shift, and go to state 103
    '+'     shift, and go to state 68
    '-'     shift, and go to state 69
    '*'     shift, and go to state 70
    '/'     shift, and go to state 71
    '='     shift, and go to state 72
    '<'     shift, and go to state 73
    '>'     shift, and go to state 74

    condicion  go to state 104


State 80

   25 asignacion: SETQ variable expresion •

    $default  reduce using rule 25 (asignacion)


State 81

   27 asignacion: SETF '(' AREF • variable expresion ')' expresion

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 105


State 82

   22 definicion: LET '(' '(' • variable restodef ')' ')' $@2 instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 106


State 83

   32 bucle: LOOP WHILE expresion • DO instrucciones

    DO  shift, and go to state 107


State 84

   29 condicion: IF expresion '(' • PROGN instrucciones ')' restoif

    PROGN  shift, and go to state 108


State 85

   16 deffuncion: DEFUN IDENTIF $@1 • '(' argumentosfun ')' instrucciones ')'

    '('  shift, and go to state 109


State 86

   19 returnfrom: RETURN '-' FROM • IDENTIF expresion

    IDENTIF  shift, and go to state 110


State 87

   33 bucle: DOTIMES '(' variable • '(' LENGTH variable ')' variable ')' instrucciones
   34      | DOTIMES '(' variable • '(' LENGTH variable ')' ')' instrucciones

    '('  shift, and go to state 111


State 88

   41 incf: INCF variable '(' • AREF variable expresion ')'

    AREF  shift, and go to state 112


State 89

   42 invertir: COERCE '(' REVERSE • '(' COERCE variable '\'' LIST ')' ')' '\'' variable

    '('  shift, and go to state 113


State 90

   48 expresion: '(' AND expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 114
    operando   go to state 39
    variable   go to state 40


State 91

   49 expresion: '(' OR expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 115
    operando   go to state 39
    variable   go to state 40


State 92

   53 expresion: '(' LEQ expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 116
    operando   go to state 39
    variable   go to state 40


State 93

   54 expresion: '(' GEQ expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 117
    operando   go to state 39
    variable   go to state 40


State 94

   55 expresion: '(' NEQ expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 118
    operando   go to state 39
    variable   go to state 40


State 95

   44 expresion: '(' '+' expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 119
    operando   go to state 39
    variable   go to state 40


State 96

   45 expresion: '(' '-' expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 120
    operando   go to state 39
    variable   go to state 40


State 97

   46 expresion: '(' '*' expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 121
    operando   go to state 39
    variable   go to state 40


State 98

   47 expresion: '(' '/' expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 122
    operando   go to state 39
    variable   go to state 40


State 99

   50 expresion: '(' '=' expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 123
    operando   go to state 39
    variable   go to state 40


State 100

   51 expresion: '(' '<' expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 124
    operando   go to state 39
    variable   go to state 40


State 101

   52 expresion: '(' '>' expresion • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 125
    operando   go to state 39
    variable   go to state 40


State 102

   24 restodef: '(' MAKE • '-' ARRAY expresion ')'

    '-'  shift, and go to state 126


State 103

   28 asignacion: SETQ variable '(' REDUCE • '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

    '#'  shift, and go to state 127


State 104

   26 asignacion: SETQ variable '(' condicion •

    $default  reduce using rule 26 (asignacion)


State 105

   27 asignacion: SETF '(' AREF variable • expresion ')' expresion

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 128
    operando   go to state 39
    variable   go to state 40


State 106

   22 definicion: LET '(' '(' variable • restodef ')' ')' $@2 instrucciones

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 76

    restodef   go to state 129
    expresion  go to state 78
    operando   go to state 39
    variable   go to state 40


State 107

   32 bucle: LOOP WHILE expresion DO • instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 130
    sentencia      go to state 6
    variable       go to state 7


State 108

   29 condicion: IF expresion '(' PROGN • instrucciones ')' restoif

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 131
    sentencia      go to state 6
    variable       go to state 7


State 109

   16 deffuncion: DEFUN IDENTIF $@1 '(' • argumentosfun ')' instrucciones ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    $default  reduce using rule 17 (argumentosfun)

    argumentosfun  go to state 132
    variable       go to state 133


State 110

   19 returnfrom: RETURN '-' FROM IDENTIF • expresion

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 134
    operando   go to state 39
    variable   go to state 40


State 111

   33 bucle: DOTIMES '(' variable '(' • LENGTH variable ')' variable ')' instrucciones
   34      | DOTIMES '(' variable '(' • LENGTH variable ')' ')' instrucciones

    LENGTH  shift, and go to state 135


State 112

   41 incf: INCF variable '(' AREF • variable expresion ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 136


State 113

   42 invertir: COERCE '(' REVERSE '(' • COERCE variable '\'' LIST ')' ')' '\'' variable

    COERCE  shift, and go to state 137


State 114

   48 expresion: '(' AND expresion expresion • ')'

    ')'  shift, and go to state 138


State 115

   49 expresion: '(' OR expresion expresion • ')'

    ')'  shift, and go to state 139


State 116

   53 expresion: '(' LEQ expresion expresion • ')'

    ')'  shift, and go to state 140


State 117

   54 expresion: '(' GEQ expresion expresion • ')'

    ')'  shift, and go to state 141


State 118

   55 expresion: '(' NEQ expresion expresion • ')'

    ')'  shift, and go to state 142


State 119

   44 expresion: '(' '+' expresion expresion • ')'

    ')'  shift, and go to state 143


State 120

   45 expresion: '(' '-' expresion expresion • ')'

    ')'  shift, and go to state 144


State 121

   46 expresion: '(' '*' expresion expresion • ')'

    ')'  shift, and go to state 145


State 122

   47 expresion: '(' '/' expresion expresion • ')'

    ')'  shift, and go to state 146


State 123

   50 expresion: '(' '=' expresion expresion • ')'

    ')'  shift, and go to state 147


State 124

   51 expresion: '(' '<' expresion expresion • ')'

    ')'  shift, and go to state 148


State 125

   52 expresion: '(' '>' expresion expresion • ')'

    ')'  shift, and go to state 149


State 126

   24 restodef: '(' MAKE '-' • ARRAY expresion ')'

    ARRAY  shift, and go to state 150


State 127

   28 asignacion: SETQ variable '(' REDUCE '#' • '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

    '\''  shift, and go to state 151


State 128

   27 asignacion: SETF '(' AREF variable expresion • ')' expresion

    ')'  shift, and go to state 152


State 129

   22 definicion: LET '(' '(' variable restodef • ')' ')' $@2 instrucciones

    ')'  shift, and go to state 153


State 130

   32 bucle: LOOP WHILE expresion DO instrucciones •

    $default  reduce using rule 32 (bucle)


State 131

   29 condicion: IF expresion '(' PROGN instrucciones • ')' restoif

    ')'  shift, and go to state 154


State 132

   16 deffuncion: DEFUN IDENTIF $@1 '(' argumentosfun • ')' instrucciones ')'

    ')'  shift, and go to state 155


State 133

   18 argumentosfun: variable • argumentosfun

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    $default  reduce using rule 17 (argumentosfun)

    argumentosfun  go to state 156
    variable       go to state 133


State 134

   19 returnfrom: RETURN '-' FROM IDENTIF expresion •

    $default  reduce using rule 19 (returnfrom)


State 135

   33 bucle: DOTIMES '(' variable '(' LENGTH • variable ')' variable ')' instrucciones
   34      | DOTIMES '(' variable '(' LENGTH • variable ')' ')' instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 157


State 136

   41 incf: INCF variable '(' AREF variable • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 158
    operando   go to state 39
    variable   go to state 40


State 137

   42 invertir: COERCE '(' REVERSE '(' COERCE • variable '\'' LIST ')' ')' '\'' variable

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 159


State 138

   48 expresion: '(' AND expresion expresion ')' •

    $default  reduce using rule 48 (expresion)


State 139

   49 expresion: '(' OR expresion expresion ')' •

    $default  reduce using rule 49 (expresion)


State 140

   53 expresion: '(' LEQ expresion expresion ')' •

    $default  reduce using rule 53 (expresion)


State 141

   54 expresion: '(' GEQ expresion expresion ')' •

    $default  reduce using rule 54 (expresion)


State 142

   55 expresion: '(' NEQ expresion expresion ')' •

    $default  reduce using rule 55 (expresion)


State 143

   44 expresion: '(' '+' expresion expresion ')' •

    $default  reduce using rule 44 (expresion)


State 144

   45 expresion: '(' '-' expresion expresion ')' •

    $default  reduce using rule 45 (expresion)


State 145

   46 expresion: '(' '*' expresion expresion ')' •

    $default  reduce using rule 46 (expresion)


State 146

   47 expresion: '(' '/' expresion expresion ')' •

    $default  reduce using rule 47 (expresion)


State 147

   50 expresion: '(' '=' expresion expresion ')' •

    $default  reduce using rule 50 (expresion)


State 148

   51 expresion: '(' '<' expresion expresion ')' •

    $default  reduce using rule 51 (expresion)


State 149

   52 expresion: '(' '>' expresion expresion ')' •

    $default  reduce using rule 52 (expresion)


State 150

   24 restodef: '(' MAKE '-' ARRAY • expresion ')'

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 160
    operando   go to state 39
    variable   go to state 40


State 151

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' • '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

    '+'  shift, and go to state 161


State 152

   27 asignacion: SETF '(' AREF variable expresion ')' • expresion

    NUMBER   shift, and go to state 35
    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 36

    expresion  go to state 162
    operando   go to state 39
    variable   go to state 40


State 153

   22 definicion: LET '(' '(' variable restodef ')' • ')' $@2 instrucciones

    ')'  shift, and go to state 163


State 154

   29 condicion: IF expresion '(' PROGN instrucciones ')' • restoif

    '('  shift, and go to state 164
    ')'  shift, and go to state 165

    restoif  go to state 166


State 155

   16 deffuncion: DEFUN IDENTIF $@1 '(' argumentosfun ')' • instrucciones ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 167
    sentencia      go to state 6
    variable       go to state 7


State 156

   18 argumentosfun: variable argumentosfun •

    $default  reduce using rule 18 (argumentosfun)


State 157

   33 bucle: DOTIMES '(' variable '(' LENGTH variable • ')' variable ')' instrucciones
   34      | DOTIMES '(' variable '(' LENGTH variable • ')' ')' instrucciones

    ')'  shift, and go to state 168


State 158

   41 incf: INCF variable '(' AREF variable expresion • ')'

    ')'  shift, and go to state 169


State 159

   42 invertir: COERCE '(' REVERSE '(' COERCE variable • '\'' LIST ')' ')' '\'' variable

    '\''  shift, and go to state 170


State 160

   24 restodef: '(' MAKE '-' ARRAY expresion • ')'

    ')'  shift, and go to state 171


State 161

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' • '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

    '('  shift, and go to state 172


State 162

   27 asignacion: SETF '(' AREF variable expresion ')' expresion •

    $default  reduce using rule 27 (asignacion)


State 163

   22 definicion: LET '(' '(' variable restodef ')' ')' • $@2 instrucciones

    $default  reduce using rule 21 ($@2)

    $@2  go to state 173


State 164

   31 restoif: '(' • PROGN instrucciones ')' ')'

    PROGN  shift, and go to state 174


State 165

   30 restoif: ')' •

    $default  reduce using rule 30 (restoif)


State 166

   29 condicion: IF expresion '(' PROGN instrucciones ')' restoif •

    $default  reduce using rule 29 (condicion)


State 167

   16 deffuncion: DEFUN IDENTIF $@1 '(' argumentosfun ')' instrucciones • ')'

    ')'  shift, and go to state 175


State 168

   33 bucle: DOTIMES '(' variable '(' LENGTH variable ')' • variable ')' instrucciones
   34      | DOTIMES '(' variable '(' LENGTH variable ')' • ')' instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    ')'      shift, and go to state 176

    variable  go to state 177


State 169

   41 incf: INCF variable '(' AREF variable expresion ')' •

    $default  reduce using rule 41 (incf)


State 170

   42 invertir: COERCE '(' REVERSE '(' COERCE variable '\'' • LIST ')' ')' '\'' variable

    LIST  shift, and go to state 178


State 171

   24 restodef: '(' MAKE '-' ARRAY expresion ')' •

    $default  reduce using rule 24 (restodef)


State 172

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' • MAP '\'' LIST '#' '\'' '*' variable variable ')' ')'

    MAP  shift, and go to state 179


State 173

   22 definicion: LET '(' '(' variable restodef ')' ')' $@2 • instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 180
    sentencia      go to state 6
    variable       go to state 7


State 174

   31 restoif: '(' PROGN • instrucciones ')' ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 181
    sentencia      go to state 6
    variable       go to state 7


State 175

   16 deffuncion: DEFUN IDENTIF $@1 '(' argumentosfun ')' instrucciones ')' •

    $default  reduce using rule 16 (deffuncion)


State 176

   34 bucle: DOTIMES '(' variable '(' LENGTH variable ')' ')' • instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 182
    sentencia      go to state 6
    variable       go to state 7


State 177

   33 bucle: DOTIMES '(' variable '(' LENGTH variable ')' variable • ')' instrucciones

    ')'  shift, and go to state 183


State 178

   42 invertir: COERCE '(' REVERSE '(' COERCE variable '\'' LIST • ')' ')' '\'' variable

    ')'  shift, and go to state 184


State 179

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP • '\'' LIST '#' '\'' '*' variable variable ')' ')'

    '\''  shift, and go to state 185


State 180

   22 definicion: LET '(' '(' variable restodef ')' ')' $@2 instrucciones •

    $default  reduce using rule 22 (definicion)


State 181

   31 restoif: '(' PROGN instrucciones • ')' ')'

    ')'  shift, and go to state 186


State 182

   34 bucle: DOTIMES '(' variable '(' LENGTH variable ')' ')' instrucciones •

    $default  reduce using rule 34 (bucle)


State 183

   33 bucle: DOTIMES '(' variable '(' LENGTH variable ')' variable ')' • instrucciones

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2
    '('      shift, and go to state 3

    $default  reduce using rule 2 (instrucciones)

    instrucciones  go to state 187
    sentencia      go to state 6
    variable       go to state 7


State 184

   42 invertir: COERCE '(' REVERSE '(' COERCE variable '\'' LIST ')' • ')' '\'' variable

    ')'  shift, and go to state 188


State 185

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' • LIST '#' '\'' '*' variable variable ')' ')'

    LIST  shift, and go to state 189


State 186

   31 restoif: '(' PROGN instrucciones ')' • ')'

    ')'  shift, and go to state 190


State 187

   33 bucle: DOTIMES '(' variable '(' LENGTH variable ')' variable ')' instrucciones •

    $default  reduce using rule 33 (bucle)


State 188

   42 invertir: COERCE '(' REVERSE '(' COERCE variable '\'' LIST ')' ')' • '\'' variable

    '\''  shift, and go to state 191


State 189

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST • '#' '\'' '*' variable variable ')' ')'

    '#'  shift, and go to state 192


State 190

   31 restoif: '(' PROGN instrucciones ')' ')' •

    $default  reduce using rule 31 (restoif)


State 191

   42 invertir: COERCE '(' REVERSE '(' COERCE variable '\'' LIST ')' ')' '\'' • variable

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 193


State 192

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' • '\'' '*' variable variable ')' ')'

    '\''  shift, and go to state 194


State 193

   42 invertir: COERCE '(' REVERSE '(' COERCE variable '\'' LIST ')' ')' '\'' variable •

    $default  reduce using rule 42 (invertir)


State 194

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' • '*' variable variable ')' ')'

    '*'  shift, and go to state 195


State 195

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' • variable variable ')' ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 196


State 196

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable • variable ')' ')'

    IDENTIF  shift, and go to state 1
    '*'      shift, and go to state 2

    variable  go to state 197


State 197

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable • ')' ')'

    ')'  shift, and go to state 198


State 198

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' • ')'

    ')'  shift, and go to state 199


State 199

   28 asignacion: SETQ variable '(' REDUCE '#' '\'' '+' '(' MAP '\'' LIST '#' '\'' '*' variable variable ')' ')' •

    $default  reduce using rule 28 (asignacion)
